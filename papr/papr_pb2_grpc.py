# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import papr_pb2 as papr__pb2


class ConnectorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.iss_enroll = channel.unary_unary(
                '/Connector/iss_enroll',
                request_serializer=papr__pb2.iss_enroll_msg.SerializeToString,
                response_deserializer=papr__pb2.iss_enroll_rsp.FromString,
                )
        self.anon_auth = channel.unary_unary(
                '/Connector/anon_auth',
                request_serializer=papr__pb2.anon_auth_msg.SerializeToString,
                response_deserializer=papr__pb2.anon_auth_rsp.FromString,
                )
        self.data_dist_1 = channel.unary_unary(
                '/Connector/data_dist_1',
                request_serializer=papr__pb2.data_dist_1_msg.SerializeToString,
                response_deserializer=papr__pb2.data_dist_1_rsp.FromString,
                )
        self.data_dist_2 = channel.unary_unary(
                '/Connector/data_dist_2',
                request_serializer=papr__pb2.data_dist_2_msg.SerializeToString,
                response_deserializer=papr__pb2.data_dist_2_rsp.FromString,
                )
        self.eq_id = channel.unary_unary(
                '/Connector/eq_id',
                request_serializer=papr__pb2.eq_id_msg.SerializeToString,
                response_deserializer=papr__pb2.eq_id_rsp.FromString,
                )
        self.cred_sign = channel.unary_unary(
                '/Connector/cred_sign',
                request_serializer=papr__pb2.cred_sign_msg.SerializeToString,
                response_deserializer=papr__pb2.cred_sign_rsp.FromString,
                )
        self.ver_cred_1 = channel.unary_unary(
                '/Connector/ver_cred_1',
                request_serializer=papr__pb2.ver_cred_1_msg.SerializeToString,
                response_deserializer=papr__pb2.ver_cred_1_rsp.FromString,
                )
        self.ver_cred_2 = channel.unary_unary(
                '/Connector/ver_cred_2',
                request_serializer=papr__pb2.ver_cred_2_msg.SerializeToString,
                response_deserializer=papr__pb2.ver_cred_2_rsp.FromString,
                )


class ConnectorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def iss_enroll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def anon_auth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def data_dist_1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def data_dist_2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def eq_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cred_sign(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ver_cred_1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ver_cred_2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'iss_enroll': grpc.unary_unary_rpc_method_handler(
                    servicer.iss_enroll,
                    request_deserializer=papr__pb2.iss_enroll_msg.FromString,
                    response_serializer=papr__pb2.iss_enroll_rsp.SerializeToString,
            ),
            'anon_auth': grpc.unary_unary_rpc_method_handler(
                    servicer.anon_auth,
                    request_deserializer=papr__pb2.anon_auth_msg.FromString,
                    response_serializer=papr__pb2.anon_auth_rsp.SerializeToString,
            ),
            'data_dist_1': grpc.unary_unary_rpc_method_handler(
                    servicer.data_dist_1,
                    request_deserializer=papr__pb2.data_dist_1_msg.FromString,
                    response_serializer=papr__pb2.data_dist_1_rsp.SerializeToString,
            ),
            'data_dist_2': grpc.unary_unary_rpc_method_handler(
                    servicer.data_dist_2,
                    request_deserializer=papr__pb2.data_dist_2_msg.FromString,
                    response_serializer=papr__pb2.data_dist_2_rsp.SerializeToString,
            ),
            'eq_id': grpc.unary_unary_rpc_method_handler(
                    servicer.eq_id,
                    request_deserializer=papr__pb2.eq_id_msg.FromString,
                    response_serializer=papr__pb2.eq_id_rsp.SerializeToString,
            ),
            'cred_sign': grpc.unary_unary_rpc_method_handler(
                    servicer.cred_sign,
                    request_deserializer=papr__pb2.cred_sign_msg.FromString,
                    response_serializer=papr__pb2.cred_sign_rsp.SerializeToString,
            ),
            'ver_cred_1': grpc.unary_unary_rpc_method_handler(
                    servicer.ver_cred_1,
                    request_deserializer=papr__pb2.ver_cred_1_msg.FromString,
                    response_serializer=papr__pb2.ver_cred_1_rsp.SerializeToString,
            ),
            'ver_cred_2': grpc.unary_unary_rpc_method_handler(
                    servicer.ver_cred_2,
                    request_deserializer=papr__pb2.ver_cred_2_msg.FromString,
                    response_serializer=papr__pb2.ver_cred_2_rsp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Connector', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Connector(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def iss_enroll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Connector/iss_enroll',
            papr__pb2.iss_enroll_msg.SerializeToString,
            papr__pb2.iss_enroll_rsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def anon_auth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Connector/anon_auth',
            papr__pb2.anon_auth_msg.SerializeToString,
            papr__pb2.anon_auth_rsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def data_dist_1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Connector/data_dist_1',
            papr__pb2.data_dist_1_msg.SerializeToString,
            papr__pb2.data_dist_1_rsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def data_dist_2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Connector/data_dist_2',
            papr__pb2.data_dist_2_msg.SerializeToString,
            papr__pb2.data_dist_2_rsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def eq_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Connector/eq_id',
            papr__pb2.eq_id_msg.SerializeToString,
            papr__pb2.eq_id_rsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cred_sign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Connector/cred_sign',
            papr__pb2.cred_sign_msg.SerializeToString,
            papr__pb2.cred_sign_rsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ver_cred_1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Connector/ver_cred_1',
            papr__pb2.ver_cred_1_msg.SerializeToString,
            papr__pb2.ver_cred_1_rsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ver_cred_2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Connector/ver_cred_2',
            papr__pb2.ver_cred_2_msg.SerializeToString,
            papr__pb2.ver_cred_2_rsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
